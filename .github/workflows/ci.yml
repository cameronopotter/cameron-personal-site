name: 🌱 Digital Greenhouse CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly builds at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  
jobs:
  # ===================================
  # Code Quality and Security Checks
  # ===================================
  
  code-quality:
    name: 🔍 Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis
      
      - name: 🔐 Security scan with GitGuardian
        uses: GitGuardian/ggshield-action@v1
        env:
          GITHUB_PUSH_BEFORE_SHA: ${{ github.event.before }}
          GITHUB_PUSH_BASE_SHA: ${{ github.event.base }}
          GITHUB_PULL_REQUEST_HEAD_SHA: ${{ github.event.after }}
          GITHUB_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
          GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}
        continue-on-error: true  # Don't fail the build on security warnings
      
      - name: 🕵️ CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript,python
          queries: security-and-quality
      
      - name: 🏗️ Autobuild
        uses: github/codeql-action/autobuild@v2
      
      - name: 🔎 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:${{ matrix.language }}"

  # ===================================
  # Frontend Testing Pipeline
  # ===================================
  
  frontend-tests:
    name: 🎨 Frontend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: 📦 Install dependencies
        run: npm ci
      
      - name: 🔧 TypeScript type checking
        run: npx tsc --noEmit
      
      - name: 🧹 ESLint
        run: npm run lint
        
      - name: 💅 Prettier check
        run: npx prettier --check "src/**/*.{ts,tsx,css,md}"
      
      - name: 🧪 Unit tests
        run: npm run test -- --coverage --reporter=junit --outputFile=test-results/junit.xml
      
      - name: 📊 Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: frontend-test-results
          path: frontend/test-results/
      
      - name: 📈 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
      
      - name: 🏗️ Build production bundle
        run: npm run build
        env:
          NODE_ENV: production
      
      - name: 📦 Bundle size check
        run: node ../scripts/check-bundle-size.js
      
      - name: 🗜️ Bundle analysis
        run: |
          npx vite-bundle-analyzer --mode production --out ../bundle-analysis.html
      
      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: frontend/dist/
          retention-days: 7

  # ===================================
  # Backend Testing Pipeline  
  # ===================================
  
  backend-tests:
    name: 🐍 Backend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_digital_greenhouse
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: 📦 Install dependencies
        run: |
          pip install -r requirements.txt
          pip install -e .
      
      - name: 🔍 Ruff linting
        run: ruff check . --output-format=github
      
      - name: 💅 Black formatting check
        run: black --check --diff .
      
      - name: 🔬 MyPy type checking
        run: mypy app/ --config-file=pyproject.toml
      
      - name: 🔒 Security scan with Bandit
        run: bandit -r app/ -f json -o bandit-report.json || true
        continue-on-error: true
      
      - name: 🗃️ Database migrations
        run: alembic upgrade head
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_digital_greenhouse
      
      - name: 🧪 Unit tests
        run: pytest tests/unit -v --cov=app --cov-report=xml --cov-report=html --junit-xml=test-results/junit.xml
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_digital_greenhouse
          REDIS_URL: redis://localhost:6379/1
          TESTING: true
      
      - name: 🔗 Integration tests
        run: pytest tests/integration -v --junit-xml=test-results/integration-junit.xml
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_digital_greenhouse
          REDIS_URL: redis://localhost:6379/1
          TESTING: true
      
      - name: 🚀 API tests
        run: pytest tests/api -v --junit-xml=test-results/api-junit.xml
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_digital_greenhouse
          REDIS_URL: redis://localhost:6379/1
          TESTING: true
      
      - name: 📊 Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: backend-test-results
          path: backend/test-results/
      
      - name: 📈 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: backend/coverage.xml
          flags: backend
          name: backend-coverage

  # ===================================
  # End-to-End Testing
  # ===================================
  
  e2e-tests:
    name: 🎭 End-to-End Tests
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_digital_greenhouse
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: 📦 Install frontend dependencies
        working-directory: frontend
        run: npm ci
      
      - name: 📦 Install backend dependencies  
        working-directory: backend
        run: pip install -r requirements.txt
      
      - name: 🎭 Install Playwright
        run: npx playwright install --with-deps
      
      - name: 📥 Download frontend build
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: frontend/dist/
      
      - name: 🗃️ Setup database
        working-directory: backend
        run: alembic upgrade head
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_digital_greenhouse
      
      - name: 🚀 Start backend server
        working-directory: backend
        run: |
          python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 &
          sleep 10
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_digital_greenhouse
          REDIS_URL: redis://localhost:6379/1
          TESTING: true
      
      - name: 🌐 Start frontend server
        working-directory: frontend
        run: |
          npm run preview -- --host 0.0.0.0 --port 3000 &
          sleep 5
      
      - name: 🎭 Run E2E tests
        run: npx playwright test --reporter=html
        env:
          BASE_URL: http://localhost:3000
          API_URL: http://localhost:8000
      
      - name: ♿ Accessibility tests
        run: npx playwright test --grep="@accessibility" --reporter=html
      
      - name: 🚀 Performance tests
        run: npx playwright test --grep="@performance" --reporter=html
      
      - name: 👀 Visual regression tests
        run: npx playwright test --grep="@visual" --reporter=html
      
      - name: 📤 Upload E2E results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-results
          path: |
            playwright-report/
            test-results/

  # ===================================
  # Load Testing
  # ===================================
  
  load-tests:
    name: 🔥 Load Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[load-test]')
    needs: [e2e-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_digital_greenhouse
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        ports:
          - 6379:6379
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: 📦 Install dependencies
        run: |
          pip install locust
          npm install -g k6
      
      - name: 📦 Install backend dependencies
        working-directory: backend
        run: pip install -r requirements.txt
      
      - name: 🗃️ Setup database
        working-directory: backend
        run: alembic upgrade head
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_digital_greenhouse
      
      - name: 🚀 Start services
        run: |
          cd backend && python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 &
          sleep 10
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_digital_greenhouse
          REDIS_URL: redis://localhost:6379/1
      
      - name: 🔥 Run load tests
        run: ./scripts/load-test-runner.sh --test-type baseline --users 100 --duration 5m --tool both
      
      - name: 📤 Upload load test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: load-test-results
          path: load-test-results/

  # ===================================
  # Security and Compliance
  # ===================================
  
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🔍 Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: 📤 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: 🐳 Build Docker images for scanning
        run: |
          docker build -t digital-greenhouse-backend:latest -f backend/Dockerfile backend/
          docker build -t digital-greenhouse-frontend:latest -f frontend/Dockerfile frontend/
      
      - name: 🔍 Scan backend Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'digital-greenhouse-backend:latest'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
      
      - name: 🔍 Scan frontend Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'digital-greenhouse-frontend:latest'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

  # ===================================
  # Build and Package
  # ===================================
  
  build-and-package:
    name: 📦 Build & Package
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: 🔑 Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 📥 Download frontend build
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: frontend/dist/
      
      - name: 🏷️ Generate image tags
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: 🏷️ Generate frontend image tags
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: 🐳 Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: backend/
          file: backend/Dockerfile
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
      
      - name: 🐳 Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: frontend/
          file: frontend/Dockerfile
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # ===================================
  # Deploy to Staging
  # ===================================
  
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-package, e2e-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.digital-greenhouse.dev
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🚀 Deploy to staging
        run: |
          echo "🚀 Deploying to staging environment..."
          echo "This would typically involve:"
          echo "  - Updating Kubernetes manifests"
          echo "  - Rolling deployment"
          echo "  - Health checks"
          echo "  - Database migrations"
          echo "  - Cache warming"
      
      - name: 🧪 Smoke tests on staging
        run: |
          echo "Running smoke tests..."
          curl -f https://staging-api.digital-greenhouse.dev/health || exit 1
          curl -f https://staging.digital-greenhouse.dev || exit 1
      
      - name: 📢 Notify team
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: '🚀 Staging deployment completed for ${{ github.sha }}'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # ===================================
  # Deploy to Production
  # ===================================
  
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-package, e2e-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://digital-greenhouse.dev
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: ⏳ Wait for manual approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: cameronopotter
          minimum-approvals: 1
          issue-title: "🌟 Deploy to Production - ${{ github.sha }}"
          issue-body: |
            Please review and approve the production deployment.
            
            **Commit**: ${{ github.sha }}
            **Author**: ${{ github.actor }}
            **Changes**: ${{ github.event.head_commit.message }}
            
            **Pre-deployment checklist**:
            - [ ] All tests passing ✅
            - [ ] Security scans clean ✅
            - [ ] Performance tests acceptable ✅
            - [ ] Database migrations reviewed
            - [ ] Rollback plan ready
            - [ ] Team notified
      
      - name: 🌟 Deploy to production
        run: |
          echo "🌟 Deploying to production environment..."
          echo "This would typically involve:"
          echo "  - Blue/green deployment"
          echo "  - Database migrations"
          echo "  - Health checks"
          echo "  - Performance monitoring"
          echo "  - Gradual traffic shift"
      
      - name: 🧪 Production health checks
        run: |
          echo "Running production health checks..."
          curl -f https://api.digital-greenhouse.dev/health || exit 1
          curl -f https://digital-greenhouse.dev || exit 1
      
      - name: 📊 Update monitoring dashboards
        run: |
          echo "Updating deployment markers in monitoring..."
      
      - name: 📢 Notify team of successful deployment
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          text: '🌟 Production deployment successful! ${{ github.sha }} is now live.'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # ===================================
  # Cleanup and Reporting
  # ===================================
  
  cleanup-and-report:
    name: 🧹 Cleanup & Report
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests, e2e-tests]
    if: always()
    
    steps:
      - name: 📊 Generate test report
        run: |
          echo "# 🌱 Digital Greenhouse Test Report" > test-report.md
          echo "" >> test-report.md
          echo "**Build**: ${{ github.run_number }}" >> test-report.md
          echo "**Commit**: ${{ github.sha }}" >> test-report.md
          echo "**Author**: ${{ github.actor }}" >> test-report.md
          echo "" >> test-report.md
          echo "## Test Results" >> test-report.md
          echo "" >> test-report.md
          echo "- Frontend Tests: ${{ needs.frontend-tests.result }}" >> test-report.md
          echo "- Backend Tests: ${{ needs.backend-tests.result }}" >> test-report.md
          echo "- E2E Tests: ${{ needs.e2e-tests.result }}" >> test-report.md
          echo "" >> test-report.md
          echo "Full details available in the Actions artifacts." >> test-report.md
      
      - name: 📤 Upload test report
        uses: actions/upload-artifact@v3
        with:
          name: test-report
          path: test-report.md
      
      - name: 📢 Notify on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#ci-cd'
          text: '❌ CI/CD pipeline failed for ${{ github.sha }}'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}