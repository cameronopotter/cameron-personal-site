# Default server configuration for Digital Greenhouse Frontend

# Redirect HTTP to HTTPS (if SSL is enabled)
server {
    listen 8080;
    server_name _;
    
    # Security headers
    include /etc/nginx/conf.d/security-headers.conf;
    
    # Rate limiting
    limit_req zone=general burst=20 nodelay;
    limit_conn addr 10;
    
    # Document root
    root /usr/share/nginx/html;
    index index.html;
    
    # Error pages
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
    
    # Robots.txt
    location = /robots.txt {
        access_log off;
        log_not_found off;
        add_header Cache-Control "public, max-age=86400";
    }
    
    # Favicon and app icons
    location ~* ^/(favicon\.ico|apple-touch-icon.*\.png|android-chrome.*\.png|mstile.*\.png|safari-pinned-tab\.svg)$ {
        access_log off;
        log_not_found off;
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary "Accept-Encoding";
    }
    
    # Static assets with versioning (cache forever)
    location ~* ^/assets/.*\.(css|js|woff2?|ttf|eot|svg|png|jpg|jpeg|gif|webp|avif|ico)$ {
        limit_req zone=static burst=100 nodelay;
        
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary "Accept-Encoding";
        
        # CORS headers for assets
        add_header Access-Control-Allow-Origin "*";
        add_header Access-Control-Allow-Methods "GET, OPTIONS";
        add_header Access-Control-Allow-Headers "Range";
        
        # Serve pre-compressed files if available
        gzip_static on;
        # brotli_static on;
        
        # Handle missing files gracefully
        try_files $uri =404;
    }
    
    # Static files without versioning (short cache)
    location ~* \.(css|js|png|jpg|jpeg|gif|webp|avif|svg|ico|woff2?|ttf|eot)$ {
        limit_req zone=static burst=50 nodelay;
        
        expires 1h;
        add_header Cache-Control "public";
        add_header Vary "Accept-Encoding";
        
        gzip_static on;
        # brotli_static on;
    }
    
    # API proxy (if backend is on different port/server)
    location /api/ {
        limit_req zone=api burst=50 nodelay;
        
        # Proxy settings
        proxy_pass http://backend:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Timeouts
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        
        # Buffering
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        proxy_busy_buffers_size 8k;
        
        # No cache for API responses
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
    }
    
    # WebSocket proxy
    location /ws/ {
        limit_req zone=api burst=20 nodelay;
        
        proxy_pass http://backend:8000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket specific timeouts
        proxy_read_timeout 86400;
        proxy_send_timeout 86400;
    }
    
    # Handle SPA routing - serve index.html for all routes
    location / {
        try_files $uri $uri/ @fallback;
        
        # Cache HTML files briefly
        location ~* \.html$ {
            expires 1h;
            add_header Cache-Control "public, must-revalidate";
            add_header Vary "Accept-Encoding";
        }
    }
    
    # Fallback for SPA routing
    location @fallback {
        rewrite ^.*$ /index.html last;
    }
    
    # Handle specific SPA routes that need special treatment
    location ~ ^/(projects|skills|about|contact) {
        try_files $uri $uri/ /index.html;
        
        expires 1h;
        add_header Cache-Control "public, must-revalidate";
    }
    
    # Security: Block access to sensitive files
    location ~ /\.(git|svn|env|htaccess|htpasswd) {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Security: Block access to common exploits
    location ~* \.(php|asp|aspx|jsp|cgi)$ {
        return 444;
    }
    
    # Security: Block user agents
    if ($http_user_agent ~* (nmap|nikto|wikto|sf|sqlmap|bsqlbf|w3af|acunetix|havij|appscan)) {
        return 444;
    }
    
    # Performance: Pre-compressed files
    location ~ ^(.+)\.gz$ {
        add_header Content-Encoding gzip;
        add_header Vary Accept-Encoding;
        try_files $uri =404;
    }
    
    # Monitoring: Nginx status (restrict access)
    location = /nginx_status {
        stub_status on;
        access_log off;
        allow 127.0.0.1;
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        deny all;
    }
}