[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "digital-greenhouse-backend"
version = "1.0.0"
description = "Digital Greenhouse Backend API"
authors = [
    { name = "Cameron Potter", email = "cameron@example.com" }
]
readme = "README.md"
license = { text = "MIT" }
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: FastAPI",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
]
keywords = ["fastapi", "api", "portfolio", "3d", "garden"]

dependencies = [
    "fastapi>=0.105.0",
    "uvicorn[standard]>=0.25.0",
    "pydantic>=2.5.2",
    "pydantic-settings>=2.1.0",
    "sqlalchemy>=2.0.25",
    "alembic>=1.13.1",
    "asyncpg>=0.29.0",
    "psycopg2-binary>=2.9.9",
    "databases>=0.8.0",
    "redis>=5.0.1",
    "celery>=5.3.4",
    "websockets>=12.0",
    "httpx>=0.26.0",
    "python-multipart>=0.0.6",
    "aiofiles>=23.2.1",
    "PyGithub>=2.1.1",
    "spotipy>=2.22.1",
    "python-weather>=2.0.3",
    "wakatime>=3.0.5",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-decouple>=3.8",
    "pandas>=2.1.4",
    "numpy>=1.26.2",
    "scipy>=1.11.4",
    "prometheus-client>=0.19.0",
    "structlog>=23.2.0",
    "python-json-logger>=2.0.7",
    "sentry-sdk>=1.39.2",
    "python-dotenv>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.4",
    "pytest-asyncio>=0.21.1",
    "pytest-mock>=3.12.0",
    "pytest-cov>=4.1.0",
    "faker>=21.0.0",
    "httpx>=0.26.0",
    "ruff>=0.1.9",
    "black>=23.12.1",
    "mypy>=1.8.0",
    "pre-commit>=3.6.0",
    "ipython>=8.18.0",
    "ipdb>=0.13.13",
]
test = [
    "pytest>=7.4.4",
    "pytest-asyncio>=0.21.1",
    "pytest-mock>=3.12.0",
    "pytest-cov>=4.1.0",
    "faker>=21.0.0",
    "httpx>=0.26.0",
]
docs = [
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.4.8",
    "mkdocs-swagger-ui-tag>=0.6.6",
]

[project.urls]
Homepage = "https://github.com/cameronopotter/digital-greenhouse"
Documentation = "https://github.com/cameronopotter/digital-greenhouse/docs"
Repository = "https://github.com/cameronopotter/digital-greenhouse"
"Bug Tracker" = "https://github.com/cameronopotter/digital-greenhouse/issues"

[project.scripts]
start-dev = "scripts.run_dev:main"
start-celery = "scripts.run_celery:main"

# Tool configurations

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
skip-string-normalization = false
skip-magic-trailing-comma = false
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.pytest_cache
  | \.tox
  | \.venv
  | build
  | dist
  | migrations
  | alembic/versions
)/
'''

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "SIM",  # flake8-simplify
    "TCH",  # flake8-type-checking
    "PIE",  # flake8-pie
    "A",    # flake8-builtins
    "PL",   # pylint
    "RUF",  # ruff-specific rules
]
ignore = [
    "E501",    # line too long, handled by black
    "B008",    # do not perform function calls in argument defaults
    "PLR0913", # too many arguments to function call
    "PLR0911", # too many return statements
    "PLR2004", # magic value used in comparison
    "ARG002",  # unused method argument
    "ARG001",  # unused function argument
    "UP007",   # use `X | Y` for type unions (not compatible with Python 3.9)
]
fixable = ["ALL"]
unfixable = []
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "alembic/versions",
]
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["S101", "PLR2004", "S106", "ARG001", "ARG002"]
"scripts/*" = ["T201"]
"alembic/*" = ["I001", "F401"]

[tool.ruff.isort]
known-first-party = ["app"]
force-sort-within-sections = true
split-on-trailing-comma = true

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true
show_error_codes = true
show_error_context = true
pretty = true
plugins = ["pydantic.mypy", "sqlalchemy.ext.mypy.plugin"]

[[tool.mypy.overrides]]
module = [
    "celery.*",
    "kombu.*",
    "redis.*",
    "httpx.*",
    "databases.*",
    "asyncpg.*",
    "spotipy.*",
    "github.*",
    "weather.*",
    "wakatime.*",
    "prometheus_client.*",
    "structlog.*",
    "sentry_sdk.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-ra",
    "-q",
    "--strict-markers",
    "--strict-config",
    "--cov=app",
    "--cov-branch",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=80",
    "--durations=10",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "api: API endpoint tests",
    "db: Database tests",
    "ws: WebSocket tests",
    "slow: Slow running tests",
    "performance: Performance tests",
    "security: Security tests",
    "external: Tests that require external services",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "error::UserWarning",
]
asyncio_mode = "auto"
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

[tool.coverage.run]
source = ["app"]
branch = true
omit = [
    "*/tests/*",
    "*/alembic/*",
    "*/scripts/*",
    "*/__init__.py",
    "*/venv/*",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "except ImportError:",
]
ignore_errors = true
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

[tool.bandit]
exclude_dirs = ["tests", "alembic"]
skips = ["B101", "B601"]

[tool.setuptools]
package-dir = {"" = "."}

[tool.setuptools.packages.find]
where = ["."]
include = ["app*"]
exclude = ["tests*", "alembic*", "scripts*"]